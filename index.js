const puppeteer = require('puppeteer')
const XLSX = require('xlsx')
console.log('working')

const msg = ` –î–æ—Ä–æ–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã ADES CARGO- (–∫–æ–¥ U) - –º—ã –ø–æ–º–µ–Ω—è–ª–∏ –∞–¥—Ä–µ—Å- –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–º–µ–Ω—è—Ç—å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è —É —Å–µ–±—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å. 

‚ôªÔ∏è–í–ê–® –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ö–û–î –û–°–¢–ê–Å–¢–°–Ø- –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å- –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è

1. Âé¶U-–≤–∞—à –∫–æ–¥
2. 15147091119
3. Âπø‰∏úÁúÅÂπøÂ∑ûÂ∏ÇÁôΩ‰∫ëÂå∫Ê±üÈ´òÈïá
4. ÂçóÂ≤ó‰∏âÂÖÉÂçóË∑Ø62Âè∑ÂÆâÊâò‰ªìÂÇ®1119- Âé¶U-–≤–∞—à –∫–æ–¥Â∫ìÊàø

üì¶ –í —Å–ª—É—á–∞–µ –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–∫–ª–∞–¥- –º—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ—Å—Ç–∏ –Ω–µ –±—É–¥–µ–º

‚ö†Ô∏è–í–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Ç–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π- –ø—Ä–æ—Å–∏–º —Å–µ–≥–æ–¥–Ω—è –∂–µ –ø–æ–º–µ–Ω—è—Ç—å –∞–¥—Ä–µ—Å - –ø–æ–∫–∞ –Ω–µ –∑–∞–±—ã–ª–∏‚ÄºÔ∏è‚ÄºÔ∏è

üå∑–ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
–ù–∞ –Ω–æ–º–µ—Ä: 
‚û°Ô∏è0705905055
‚û°Ô∏è0225905055
‚û°Ô∏è0997905055
–ß—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å - –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å- –æ—Ç–∫—Ä–æ–π –≤–∏–¥–µ–æ: 
¬´–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ¬ª
‚ù§Ô∏è –°/–£ ADES CARGO

–≠–¢–û –ë–û–¢ –†–ê–°–°–´–õ–ö–ê- –°–Æ–î–ê –ù–ò–ß–ï–ì–û –ù–ï –û–¢–ü–†–ê–í–õ–Ø–ô–¢–ï`
async function main() {
	console.log('–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã')

	const browser = await puppeteer.launch({ headless: false })
	const page = await browser.newPage()
	await page.goto('https://web.whatsapp.com/')

	const workbook = XLSX.readFile('./phone.xlsx')
	const sheetName = workbook.SheetNames[0]
	const worksheet = workbook.Sheets[sheetName]

	const phoneColumnName = 'Phone'

	const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 })
	const phoneColumnIndex = data[0].indexOf(phoneColumnName)
	const phoneNumbers = data.slice(1).map((row) => row[phoneColumnIndex])

	console.log('–ù–æ–º–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞:', phoneNumbers)
	const formattedPhoneNumbers = phoneNumbers.map((phone) => {
		const countryCode = phone.slice(0, 4)
		const remainingDigits = phone.slice(4)

		const formattedNumber = remainingDigits.replace(
			/(\d{3})(\d{3})(\d{3})/,
			'$1 $2 $3'
		)

		return `${countryCode} ${formattedNumber}`
	})
	console.log(formattedPhoneNumbers)
	const failedPhoneNumbers = []

	for (let i = 0; i < formattedPhoneNumbers.length; i++) {
		const phoneNumber = formattedPhoneNumbers[i]

		try {
			const newChatButton = await page.waitForSelector(
				'[data-icon="new-chat-outline"]'
			)
			await newChatButton.click()
			await page.type('.lexical-rich-text-input', `${phoneNumber}`)
			await new Promise((resolve) => setTimeout(resolve, 500))
			await page.waitForSelector(`span[title="${phoneNumber}"]`)
			await page.click(`span[title="${phoneNumber}"]`)
			await new Promise((resolve) => setTimeout(resolve, 500))
			await page.waitForSelector('._3Uu1_')
			await page.focus('._3Uu1_')
			await page.keyboard.down('Shift')

			await page.keyboard.type(msg)
			await page.keyboard.up('Shift')

			await new Promise((resolve) => setTimeout(resolve, 1200))
			await page.keyboard.press('Enter')
			console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${phoneNumber} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`)
			await page.waitForSelector('.kiiy14zj')
			await page.click('.kiiy14zj')
			await page.waitForSelector('[aria-label="–£–¥–∞–ª–∏—Ç—å —á–∞—Ç"]')
			await page.click('[aria-label="–£–¥–∞–ª–∏—Ç—å —á–∞—Ç"]')
			await page.waitForSelector(
				'.emrlamx0.aiput80m.h1a80dm5.sta02ykp.g0rxnol2.l7jjieqr.hnx8ox4h.f8jlpxt4.l1l4so3b.le5p0ye3.m2gb0jvt.rfxpxord.gwd8mfxi.mnh9o63b.qmy7ya1v.dcuuyf4k.swfxs4et.bgr8sfoe.a6r886iw.fx1ldmn8.orxa12fk.bkifpc9x.rpz5dbxo.bn27j4ou.oixtjehm.hjo1mxmu.snayiamo.szmswy5k'
			)
			await page.click(
				'.emrlamx0.aiput80m.h1a80dm5.sta02ykp.g0rxnol2.l7jjieqr.hnx8ox4h.f8jlpxt4.l1l4so3b.le5p0ye3.m2gb0jvt.rfxpxord.gwd8mfxi.mnh9o63b.qmy7ya1v.dcuuyf4k.swfxs4et.bgr8sfoe.a6r886iw.fx1ldmn8.orxa12fk.bkifpc9x.rpz5dbxo.bn27j4ou.oixtjehm.hjo1mxmu.snayiamo.szmswy5k'
			)
			await new Promise((resolve) => setTimeout(resolve, 500))
		} catch (error) {
			console.error(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä ${formattedPhoneNumbers}: ${error.message}`
			)
			failedPhoneNumbers.push(formattedPhoneNumbers)
		}
	}

	console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞:', failedPhoneNumbers)

	const workbookFailed = XLSX.utils.book_new()
	const worksheetFailed = XLSX.utils.aoa_to_sheet([
		['–ù–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'],
	])
	failedPhoneNumbers.forEach((phoneNumber, index) => {
		XLSX.utils.sheet_add_aoa(worksheetFailed, [[phoneNumber]], { origin: -1 })
	})
	XLSX.utils.book_append_sheet(
		workbookFailed,
		worksheetFailed,
		'–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞'
	)
	XLSX.writeFile(workbookFailed, './failed_phone_numbers.xlsx')

	console.log('–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
}
// const workbook = XLSX.readFile('./numbers.xlsx')
// const sheetName = workbook.SheetNames[0]
// const worksheet = workbook.Sheets[sheetName]

// const phoneColumnName = 'Phone'

// const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 })

// const phoneColumnIndex = data[0].indexOf(phoneColumnName)

main()
